service: nutrition-tracking-app
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  environment:
    DYNAMODB_TABLE: MyTrackerTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:${self:provider.region}:607681518719:table/${self:provider.environment.DYNAMODB_TABLE}"

package:
  patterns:
    - '!src/**'
    - '!tsconfig.json'
    - '!package-lock.json'
    - '!shared-local-instance.db'
    - '!dynamodb-local-metadata.json'
    - '!.dynamodb/**'
    - '!readme.md'
    - '!serverless.local.yml'
    - 'dist/'
  excludeDevDependencies: true

# custom:
#   defaultCorsConfig: &defaultCorsConfig
#     origins:
#       - '*'
#     headers:
#       - Content-Type
#       - X-Amz-Date
#       - Authorization
#       - X-Api-Key
#       - X-Amz-Security-Token
#       - X-Amz-User-Agent
#     allowCredentials: false

functions:
  createUser:
    handler: dist/handlers/userHandlers.createUser
    events:
      - http:
          path: users/create
          method: post
          cors: 
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getUser:
    handler: dist/handlers/userHandlers.getUser
    events:
      - http:
          path: users/{userId}
          method: get
          cors: 
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  updateUser:
    handler: dist/handlers/userHandlers.updateUser
    events:
      - http:
          path: users/update/{userId}
          method: put
          cors: 
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  createDailyLog:
    handler: dist/handlers/nutritionHandlers.createDailyLog
    events:
      - http:
          path: logs/{userId}/create
          method: post
          cors: 
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getDailyLog:
    handler: dist/handlers/nutritionHandlers.getDailyLog
    events:
      - http:
          path: logs/{userId}/{logId}
          method: get
          cors: 
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  updateDailyLog:
    handler: dist/handlers/nutritionHandlers.updateDailyLog
    events:
      - http:
          path: logs/{userId}/{logId}
          method: put
          cors: 
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  deleteDailyLog:
    handler: dist/handlers/nutritionHandlers.deleteDailyLog
    events:
      - http:
          path: logs/{userId}/{logId}
          method: delete
          cors: 
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  createCheckin:
    handler: dist/handlers/nutritionHandlers.createCheckin
    events:
      - http:
          path: checkins/{userId}/create
          method: post
          cors: 
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getCheckin:
    handler: dist/handlers/nutritionHandlers.getCheckin
    events:
      - http:
          path: checkins/{userId}/{checkinId}
          method: get
          cors: 
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  updateCheckin:
    handler: dist/handlers/nutritionHandlers.getCheckin
    events:
      - http:
          path: checkins/{userId}/{checkinId}
          method: put
          cors: 
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  createWorkout:
    handler: dist/handlers/WorkoutService.createWorkout
    events:
      - http:
          path: workouts/{userId}/create
          method: post
          cors: 
            origins:
              - '*'
            headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: false
  getWorkouts:
    handler: dist/handlers/WorkoutService.getWorkouts
    events:
      - http:
          path: workouts/{userId}
          method: get
          cors: 
            origins:
              - '*'
            headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: false
  getWorkoutById:
    handler: dist/handlers/WorkoutService.getWorkoutById
    events:
      - http:
          path: workouts/{userId}/{workoutId}
          method: get
          cors: 
            origins:
              - '*'
            headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: false
  updateWorkout:
    handler: dist/handlers/WorkoutService.updateWorkout
    events:
      - http:
          path: workouts/{userId}/{workoutId}
          method: put
          cors: 
            origins:
              - '*'
            headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: false
  deleteWorkout:
    handler: dist/handlers/WorkoutService.deleteWorkout
    events:
      - http:
          path: workouts/{userId}/{workoutId}
          method: delete
          cors: 
            origins:
              - '*'
            headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: false
  createExercise:
    handler: dist/handlers/ExerciseService.createExercise
    events:
      - http:
          path: exercises/{userId}/create
          method: post
          cors: 
            origins:
              - '*'
            headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: false
  getExercises:
    handler: dist/handlers/ExerciseService.getExercises
    events:
      - http:
          path: exercises/{userId}
          method: get
          cors: 
            origins:
              - '*'
            headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: false
  getExercise:
    handler: dist/handlers/ExerciseService.getExercise
    events:
      - http:
          path: exercises/{userId}/{exerciseId}
          method: get
          cors: 
            origins:
              - '*'
            headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: false
  updateExercise:
    handler: dist/handlers/ExerciseService.updateExercise
    events:
      - http:
          path: exercises/{userId}/{exerciseId}
          method: put
          cors: 
            origins:
              - '*'
            headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: false
  deleteExercise:
    handler: dist/handlers/ExerciseService.deleteExercise
    events:
      - http:
          path: exercises/{userId}/{exerciseId}
          method: delete
          cors: 
            origins:
              - '*'
            headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: false

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: ApiGatewayRestApi